<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title></title>
</head>
<body>
이제 윕페이지를 하나 만들었습니다.
</body>
</html>
<!doctype html>
<html lang="ko">
<head>
  <meta charset="utf-8"/>
  <title>UNESCO 학습 성취도 — 연도별 선 그래프 (호버로 이름 표시)</title>
  <meta name="viewport" content="width=device-width,initial-scale=1"/>
  <style>
    body { font-family: Arial, sans-serif; margin: 0; }
    #chart { width: 100%; height: 90vh; }
    .axis path, .axis line { stroke: #ccc; }
    .line { fill: none; stroke-width: 1.2px; opacity: 0.6; cursor: pointer; }
    .line:hover { stroke-width: 3px; opacity: 1; }
    .tooltipName {
      position: absolute;
      pointer-events: none;
      font-weight: 700;
      font-size: 28px;
      color: rgba(20,20,20,0.95);
      background: rgba(255,255,255,0.75);
      padding: 6px 10px;
      border-radius: 6px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      transform: translate(-50%, -120%);
      white-space: nowrap;
      display: none;
      z-index: 1000;
    }
    .controls {
      padding: 8px 12px;
      background: #f7f7f7;
      border-bottom: 1px solid #eee;
    }
    .legend {
      font-size: 12px;
      color: #333;
    }
  </style>
</head>
<body>
  <div class="controls">
    <strong>데이터 출처:</strong> 업로드된 `data.json` 사용. (geoUnit은 ISO 코드 또는 데이터에 있는 식별자입니다.) 
    <span style="margin-left:20px">표시되는 텍스트는 현재 데이터의 <em>geoUnit</em> 값을 사용합니다. (전체 국가명 매핑 원하시면 추가로 적용해 드립니다.)</span>
  </div>

  <div id="chart"></div>
  <div id="tooltip" class="tooltipName"></div>

  <!-- D3 v7 -->
  <script src="https://d3js.org/d3.v7.min.js"></script>
  <script>
  // 설정
  const margin = {top: 30, right: 20, bottom: 40, left: 60};
  const width = Math.max(800, window.innerWidth * 0.85);
  const height = Math.max(400, window.innerHeight * 0.7);

  const svg = d3.select("#chart")
    .append("svg")
    .attr("width", width)
    .attr("height", height)
    .style("display","block")
    .style("margin","0 auto");

  const g = svg.append("g").attr("transform", `translate(${margin.left},${margin.top})`);

  const innerWidth = width - margin.left - margin.right;
  const innerHeight = height - margin.top - margin.bottom;

  const tooltip = d3.select("#tooltip");

  // 선 생성 함수
  const lineGenerator = d3.line()
    .x(d => x(d.year))
    .y(d => y(d.value))
    .defined(d => d.value !== null && !isNaN(d.value));

  // 데이터 불러오기 (data.json은 같은 폴더에 있어야 함)
  fetch('data.json')
    .then(res => res.json())
    .then(raw => {
      // raw.records 예상 (indicatorId, geoUnit, year, value 등)
      const records = (raw.records || []).filter(r => r.indicatorId && r.geoUnit && r.year != null && r.value != null);

      if (!records.length) {
        g.append("text").text("데이터가 비어있거나 형식이 맞지 않습니다. data.json을 확인하세요.")
          .attr("x", 10).attr("y", 20).attr("fill","red");
        return;
      }

      // 그룹화: geoUnit 별로 연도 정렬
      const nested = d3.group(records, d => d.geoUnit);
      const series = Array.from(nested, ([geoUnit, items]) => {
        const arr = items.map(d => ({ year: +d.year, value: +d.value })).sort((a,b)=>a.year-b.year);
        return { id: geoUnit, values: arr };
      });

      // X 축: 전체 연도 범위
      const allYears = Array.from(new Set(records.map(d=>+d.year))).sort((a,b)=>a-b);
      const yearsExtent = d3.extent(allYears);
      const minYear = yearsExtent[0], maxYear = yearsExtent[1];

      // Y 축: 값 범위 (약간 여유 추가)
      const allValues = records.map(d => +d.value).filter(v => !isNaN(v));
      const vExtent = d3.extent(allValues);
      const yPad = (vExtent[1] - vExtent[0]) * 0.06;
      const yMin = Math.max(0, vExtent[0] - yPad);
      const yMax = vExtent[1] + yPad;

      // 스케일
      window.x = d3.scaleLinear().domain([minYear, maxYear]).range([0, innerWidth]);
      window.y = d3.scaleLinear().domain([yMin, yMax]).range([innerHeight, 0]);

      // 축 그리기
      const xAxis = d3.axisBottom(x).ticks(Math.min(10, maxYear - minYear)).tickFormat(d3.format("d"));
      const yAxis = d3.axisLeft(y);

      g.append("g")
        .attr("transform", `translate(0, ${innerHeight})`)
        .attr("class","axis")
        .call(xAxis);

      g.append("g")
        .attr("class","axis")
        .call(yAxis);

      // 그리기: 각 나라별 선
      // 색상 — d3.schemeCategory10 반복 사용
      const color = d3.scaleOrdinal(d3.schemeTableau10);

      // 선 그룹
      const linesG = g.append("g").attr("class","lines");

      const paths = linesG.selectAll("path")
        .data(series)
        .join("path")
        .attr("class","line")
        .attr("d", d => lineGenerator(d.values))
        .attr("stroke", (d,i) => color(i))
        .attr("data-id", d => d.id)
        .style("mix-blend-mode","multiply")
        .on("mouseover", function(event, d) {
          // 돋보이게
          d3.selectAll(".line").style("opacity", 0.1);
          d3.select(this).style("opacity",1).style("stroke-width","3px");
          // 툴팁 위치와 내용
          const [mx, my] = d3.pointer(event);
          tooltip.style("left", (event.pageX) + "px")
                 .style("top", (event.pageY) + "px")
                 .style("display", "block")
                 .style("transform","translate(-50%,-120%)")
                 .text(d.id);
        })
        .on("mousemove", function(event, d) {
          tooltip.style("left", (event.pageX) + "px")
                 .style("top", (event.pageY) + "px");
        })
        .on("mouseout", function(event, d) {
          d3.selectAll(".line").style("opacity", 0.6).style("stroke-width","1.2px");
          tooltip.style("display","none");
        });

      // 클릭하면 해당 나라를 강하게 강조 (토글)
      paths.on("click", function(event, d) {
        const isActive = d3.select(this).classed("active");
        d3.selectAll(".line").classed("active", false).style("opacity", 0.6).style("stroke-width","1.2px");
        if (!isActive) {
          d3.select(this).classed("active", true).style("opacity",1).style("stroke-width","4px");
        }
      });

      // 작은 레이블: 마우스가 없을 때 오른쪽 상단에 눈에 띄게 최근 연도 값과 ID 표시 (선택적)
      const info = svg.append("g").attr("transform", `translate(${margin.left + 10}, ${margin.top + 5})`);
      info.append("text").attr("class","legend")
          .text("호버하면 해당 선의 geoUnit 코드가 크게 표시됩니다.")
          .attr("font-size", 13);

      // 반응형: 창 크기 변경시 간단 리사이즈(너비만)
      window.addEventListener('resize', () => {
        const newW = Math.max(600, window.innerWidth * 0.85);
        svg.attr("width", newW);
        // (복잡한 재배치는 생략 — 필요하면 재렌더링 로직 추가 가능)
      });

    })
    .catch(err => {
      console.error(err);
      g.append("text").text("data.json 로드 실패: 콘솔을 확인하세요.").attr("x",10).attr("y",20).attr("fill","red");
    });
  </script>
</body>
</html>
